;;; -*- lisp -*-

(load "compiler.lisp")

(defun xor (a b)
  (if a (not b) b))

(defparameter *bertl_test*
  '(progn
  	(turn right)
	(label kreis)
	(pick-up)
	(pick-up)
	(drop)
	(drop)
	(move)
	(goto kreis)
  ))

(defparameter *faz-ant*
  '(progn
     (label normal_move)
     (if (sense ahead food)
	 (progn
	   (if (not (sense ahead home))
	       (progn
		 (move)
		 (pick-up)
		 (goto go_home)
		 )
	     (goto move_out)
	     )
	   )
       (progn
	 (if (sense right-ahead food)
	     (progn
	       (turn right)
	       (move)
	       (pick-up)
	       (goto go_home)
	       )
	   (goto move_out)
	   )
	 (if (sense left-ahead food)
	     (progn
	       (if (not (sense left-ahead home))
		   (progn
		     (turn left)
		     (move)
		     (pick-up)
		     (goto go_home)
		     )
		 (goto move_out))
	       )
	   (nop)
	   ))
       )
     (while (not (move))
       (progn
	 (if (flip 2)
	     (turn left)
	   (turn right))
	 ))
	
     (goto normal_move)

     (label  move_out)
     (turn right)
     (turn right)
     (move)
     (goto normal_move)

     (label go_home)

     (while (not (sense ahead home))
       (progn
	 (if (not(move))
	     (if (flip 2)
		 (turn left)
	       (turn right)
	       )
	   (nop)
	   )
	 )
       )
     (move)
     (drop)			
     (goto move_out)
     ))


;;; a little more biased on turning

(defparameter *kurde-ant*
  '(progn
     (label normal_move)
     (if (sense ahead food)
	 (progn
	   (if (not (sense ahead home))
	       (progn
		 (move)
		 (pick-up)
		 (goto go_home)
		 )
	     (goto move_out)
	     )
	   )
       (progn
	 (if (sense right-ahead food)
	     (progn
	       (turn right)
	       (move)
	       (pick-up)
	       (goto go_home)
	       )
	   (goto move_out)
	   )
	 (if (sense left-ahead food)
	     (progn
	       (if (not (sense left-ahead home))
		   (progn
		     (turn left)
		     (move)
		     (pick-up)
		     (goto go_home)
		     )
		 (goto move_out))
	       )
	   (turn left)
	   ))
       )
     (while (not (move))
       (progn
	 (if (flip 3)
	     (turn right)
	   (turn left))
	 ))
	
     (goto normal_move)

     (label  move_out)
     (if (flip 2)
	 (progn (turn right)(turn right))
         (progn (turn right)(turn right)(turn right))
	 )
     (move)
     (goto normal_move)

     (label go_home)

     (while (not (sense ahead home))
       (progn
	 (if (not(move))
	     (if (flip 3)
		 (turn left)
	       (turn right)
	       )
	   (move)
	   )
	 )
       )
     (move)
     (drop)
     (turn right)
     (goto move_out)
     ))

;;; gadaffi

(defparameter *gadaffi-ant*
  '(progn
     (label normal_move)
     (if (sense ahead food)
	 (progn
	   (if (not (sense ahead home))
	       (progn
		 (while (not (move)) 
		   (if (flip 5)
		       (goto idle_break_ahead)
		       (turn right)
		   )
		 )
		 (label idle_break_ahead)
		 (pick-up)
		 (goto go_home))
	     (goto move_out)
	     )
	   )
       (progn
	 (if (sense right-ahead food)
	     (progn
	       (turn right)
	       (while (not (move))
		 (if (flip 5)
		     (goto idle_break_right)
		     (turn right)
		 )
	       )
(label idle_break_right)
	       (pick-up)
	       (goto go_home)
	       )
	   (goto move_out)
	   )
	 (if (sense left-ahead food)
	     (progn
	       (if (not (sense left-ahead home))
		   (progn
		     (turn left)
		     (while (not(move))
		       (if (flip 5)
			   (goto idle_break_left)
			   (turn left)
		       )
		     )
(label idle_break_left)
		     (pick-up)
		     (goto go_home)
		     )
		 (goto move_out))
	       )
	   (turn left)
	   ))
       )
     (while (not (move))
       (progn
	 (if (flip 3)
	     (turn right)
	   (turn left))
	 ))
	
     (goto normal_move)

     (label  move_out)
     (if (flip 2)
	 (progn (turn left))
         (progn (turn right)(turn right))
	 )
	 (move)
     (goto normal_move)

     (label go_home)

     (while (not (sense ahead home))
       (progn
	 (if (not(move))
	     (if (flip 3)
		 (turn left)
	       (turn right)
	       )
	   (move)
	  )
	  (if (flip 3)
		 (turn left)
	       (turn right)
	       )
	 )
       )
     (move)
     (drop)
     (turn right)
     (goto move_out)
     ))

 
(defparameter *looter-ant*
'(progn (label looting_check)
(if (sense left-ahead foe-home) (turn left)(nop))
(if (sense right-ahead foe-home) (turn right)(nop))
(if (sense ahead foe-home)  
(progn 					 ;; kurd around searching for loot
(if (not(move))
	(if (sense left-ahead foe-home)
		(progn
			(turn left)
			(if (move)
				(if (flip 6)(turn left)(turn right))
				(nop) 
			)
			(goto in_check)			
		)
		(progn 
			(turn right)
			(if (move)
				(turn left)
				(nop) 
			)
			(goto in_check)
		)
	)
	;; we are in
	(nop) 
	)	
(label in_foreign_base)	
;(turn right)(turn right)(turn right)(turn right)(turn right)(turn right)
(if (sense here food)
	(progn (pick-up)(turn right)(turn right)(goto move_out))
	(nop)
	)
(while (and (not(sense ahead food)) (not(sense ahead foe-home)))
       (progn	 
       		(turn left)
		(if (sense here food)
	  		(progn
				(pick-up)
				;; get out
				(label move_out)
;;				(turn right)(turn right)(turn right)(turn right)(turn right)(turn right)
				(if (not(sense here foe-home))
					(progn (drop)(turn right)(turn right)(turn right)(goto in_check))
					(nop)
				)
				(while (sense ahead foe-home)
				       (progn
					 (if (not(move))
					     (if (flip 2)(turn left)(turn right))
					   (nop)
					  )
					  (if (flip 2)(turn left)(turn right))
					))
				(if (not(sense ahead foe-home))	
					(if(move)
						(progn 
							(drop)(turn right)(turn right)(turn right)
							(goto looting_check))
						(goto move_out)
					)	
					(goto move_out)
					)
				(turn right)(turn right)(turn right)
			)
			(if (sense left-ahead foe-home)
					(turn left)
					(if (sense right-ahead foe-home)
						(turn right)
						(nop))
				)
		)
		(if (flip 3)
			(turn left)(turn right)
  		)
		(if (sense ahead foe-home)
			(move)
			(nop))	
	)     
)
;; -->
	(if (not(sense ahead foe-home) ) 
		(if (move)
			(progn (pick-up) (goto move_out))
			(nop)
		)
		(turn left)
	)		
)
	(progn
	(label in_check)
	(if (not (sense here foe-home))
		(progn
	 		(if (not(move))
				(if (flip 2)(progn (turn left))(turn right))
			   	(if (flip 3)(turn left)(move))
			)
		)
	  	(goto in_foreign_base)	
	)
	)
)
(goto looting_check)
))




;;; ash

(defparameter *ash-ant*
  '(progn
	(if (flip 2)
		(goto evil_looting_check)
		(nop)
		)
  
     (label normal_move)
     (if (sense ahead food)
	 (progn
	   (if (not (sense ahead home))
	       (progn
		 (while (not (move)) 
		   (if (flip 5)
		       (goto idle_break_ahead)
		       (turn right)
		   )
		 )
		 (label idle_break_ahead)
		 (pick-up)
		 (goto go_home))
	     (goto move_out)
	     )
	   )
       (progn
	 (if (sense right-ahead food)
	     (progn
	       (turn right)
	       (while (not (move))
		 (if (flip 5)
		     (goto idle_break_right)
		     (turn right)
		 )
	       )
(label idle_break_right)
	       (pick-up)
	       (goto go_home)
	       )
	   (goto move_out)
	   )
	 (if (sense left-ahead food)
	     (progn
	       (if (not (sense left-ahead home))
		   (progn
		     (turn left)
		     (while (not(move))
		       (if (flip 5)
			   (goto idle_break_left)
			   (turn left)
		       )
		     )
(label idle_break_left)
		     (pick-up)
		     (goto go_home)
		     )
		 (goto move_out))
	       )
	   (turn left)
	   ))
       )
     (while (not (move))
       (progn
	 (if (flip 3)
	     (turn right)
	   (turn left))
	 ))
	
     (goto normal_move)

     (label  move_out)
     (if (flip 2)
	 (progn (turn left))
         (progn (turn right)(turn right))
	 )
	 (move)
     (goto normal_move)

     (label go_home)

     (while (not (sense ahead home))
       (progn
	 (if (not(move))
	     (if (flip 3)
		 (turn left)
	       (turn right)
	       )
	   (move)
	  )
	  (if (flip 3)
		 (turn left)
	       (turn right)
	       )
	 )
       )
     (move)
     (drop)
     (turn right)
     (goto move_out)


;; evil ash     

(label evil_looting_check)
(if (sense left-ahead foe-home) (turn left)(nop))
(if (sense right-ahead foe-home) (turn right)(nop))
(if (sense ahead foe-home)  
(progn 					 ;; kurd around searching for loot
(if (not(move))
	(if (sense left-ahead foe-home)
		(progn
			(turn left)
			(if (move)
				(if (flip 6)(turn left)(turn right))
				(nop) 
			)
			(goto evil_in_check)			
		)
		(progn 
			(turn right)
			(if (move)
				(turn left)
				(nop) 
			)
			(goto evil_in_check)
		)
	)
	;; we are in
	(nop) 
	)	
(label evil_in_foreign_base)	
;(turn right)(turn right)(turn right)(turn right)(turn right)(turn right)
(if (sense here food)
	(progn (pick-up)(goto evil_move_out))
	(nop)
	)
(while (and (not(sense ahead food)) (not(sense ahead foe-home)))
       (progn	 
       		(if (or (sense left-ahead foe-home) (sense right-ahead foe-home))
			(progn (turn right)(turn right))
			(nop))
       		;;(turn left)
		(if (sense here food)
	  		(progn
				(pick-up)
				;; get out
				(label evil_move_out)
				(turn right)(turn right)(turn right)(turn right)(turn right)(turn right)
				(if (not(sense here foe-home))
					(progn (drop)(turn right)(turn right)(turn right)(goto evil_in_check))
					(progn (move))
				)
				(while (sense ahead foe-home)
				       (progn
					 (if (not(move))
					     (if (flip 2)(turn left)(turn right))
					   (nop)
					  )
					  (if (flip 2)(turn left)(turn right))
					))
				(if (not(sense ahead foe-home))	
					(if(move)
						(progn 
							(if (not(sense here foe-home))(drop)(nop))
							(turn right)(turn right)(turn right)
							(goto evil_looting_check))
						(goto evil_move_out)
					)	
					(goto evil_move_out)
					)
				(turn right)(turn right)(turn right)
				(goto move_out)
			)
			(if (sense left-ahead foe-home)
					(turn left)
					(if (sense right-ahead foe-home)
						(turn right)
						(nop))
				)
		)
		(if (flip 3)
			(turn left)(turn right)
  		)
		(if (sense ahead foe-home)
			(move)
			(nop))	
	)     
)
;; -->
	(if (not(sense ahead foe-home) ) 
		(if (move)
			(progn (pick-up) (goto evil_move_out))
			(nop)
		)
		(turn left)
	)		
)
	(progn
	(label evil_in_check)
	(if (not (sense here foe-home))
		(progn
			(drop)
	 		(if (not(move))
				(if (flip 2)(progn (turn left))(turn right))
			   	(if (flip 3)(turn left)(move))
			)
		)
	  	(goto evil_in_foreign_base)	
	)
	)
)
(goto evil_looting_check)
     
     
     
     ))



(compile-to-file *bertl_test* nil "bertl_test.ant")
(compile-to-file *faz-ant* nil "faz.ant")
(compile-to-file *kurde-ant* nil "kurde.ant")
(compile-to-file *gadaffi-ant* nil "gadaffi.ant")
(compile-to-file *ash-ant* nil "ash.ant")
(compile-to-file *looter-ant* nil "looter.ant")
